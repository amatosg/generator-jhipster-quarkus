<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest;

<%_ if (databaseType === 'mongodb') { _%>
import io.mongock.driver.mongodb.sync.v4.driver.MongoSync4Driver;
import io.mongock.runner.standalone.MongockStandalone;
import com.mongodb.client.MongoClient;
import org.eclipse.microprofile.config.inject.ConfigProperty;
<%_ } _%>

import <%=packageName%>.TestUtil;
import <%=packageName%>.security.AuthoritiesConstants;
<%_ if (databaseType === 'sql') { _%>
import io.quarkus.liquibase.LiquibaseFactory;
<%_ } _%>
import io.quarkus.test.junit.QuarkusTest;
<%_ if (databaseType === 'sql') { _%>
import liquibase.Liquibase;
<%_ } else if (databaseType === 'mongodb') { _%>
import org.eclipse.microprofile.config.inject.ConfigProperty;
<%_ } _%>
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import jakarta.inject.Inject;

import static io.restassured.RestAssured.given;
import static jakarta.ws.rs.core.MediaType.APPLICATION_JSON;
import static jakarta.ws.rs.core.Response.Status.OK;
import static org.hamcrest.Matchers.*;

@QuarkusTest
class AuthorityResourceTest {

    String adminToken;

<%_ if (databaseType === 'sql') { _%>
    @Inject
    LiquibaseFactory liquibaseFactory;
<%_ } else if (databaseType === 'mongodb') { _%>
    @Inject
    MongoClient mongoClient;

    @ConfigProperty(name = "quarkus.mongodb.database")
    String databaseName;
<%_ } _%>

    @BeforeEach
    public void authenticateAdmin() {
        this.adminToken = TestUtil.getAdminToken();
    }

<%_ if (databaseType === 'sql') { _%>
    @BeforeEach
    public void databaseFixture() throws Exception {
        try (Liquibase liquibase = liquibaseFactory.createLiquibase()) {
            liquibase.dropAll();
            liquibase.validate();
            liquibase.update(liquibaseFactory.createContexts(), liquibaseFactory.createLabels());
        }
    }
<%_ } else if (databaseType === 'mongodb') { _%>
    @BeforeEach
    public void databaseFixture() {
        mongoClient.getDatabase(databaseName).drop();

        MongockStandalone
            .builder()
            .setDriver(MongoSync4Driver.withDefaultLock(mongoClient, databaseName))
            .addChangeLogsScanPackage("<%=packageName%>.config.dbmigrations")
            .buildRunner()
            .execute();
    }
<%_ } _%>

    @Test
    public void getAllAuthorities() {
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
        .when()
            .get("/api/authorities")
        .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .body("$", hasSize(greaterThan(0)))
            .body("$", hasItems(AuthoritiesConstants.USER, AuthoritiesConstants.ADMIN));
    }
}
