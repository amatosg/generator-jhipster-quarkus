<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.infrastructure;

import dasniko.testcontainers.keycloak.KeycloakContainer;
import io.quarkus.test.common.DevServicesContext;
import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;
import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;

import java.util.Map;
import java.util.Optional;

/**
 * Keycloak OIDC server resource integration with Quarkus DevServices to
 * authenticate users during Native/Integration tests execution.
 */
public class KeycloakServerResource implements QuarkusTestResourceLifecycleManager, DevServicesContext.ContextAware {

    private Optional<String> containerNetworkId;
    private KeycloakContainer container;
    private String keycloakServerUrl;

    @Override
    public void setIntegrationTestContext(DevServicesContext context) {
        containerNetworkId = context.containerNetworkId();
    }

    @Override
    public Map<String, String> start() {
        container =
            new KeycloakContainer("quay.io/keycloak/keycloak:19.0.1")
                .withRealmImportFile("jhipster-realm.json");

        containerNetworkId.ifPresent(container::withNetworkMode);
        container.start();

        keycloakServerUrl = getAuthServerUrl();
        return ImmutableMap.of("quarkus.oidc.auth-server-url", keycloakServerUrl);
    }

    private String getAuthServerUrl() {
        String authServerUrl = container.getAuthServerUrl() + "realms/jhipster";
        if(containerNetworkId.isPresent()) {
            authServerUrl = "http://" + container.getCurrentContainerInfo().getConfig().getHostName() + authServerUrl.substring(authServerUrl.lastIndexOf(":"));
        }
        return authServerUrl;
    }

    @Override
    public void stop() {
        if (container != null) {
            container.stop();
            container = null;
        }
    }

    @Override
    public void inject(TestInjector testInjector) {
        testInjector.injectIntoFields(keycloakServerUrl, new TestInjector.AnnotatedAndMatchesType(InjectKeycloakServer.class, String.class));
    }
}
