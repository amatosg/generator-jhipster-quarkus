<%#
 Copyright 2020-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.infrastructure;

import io.quarkus.test.common.DevServicesContext;
import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;

import java.util.Map;
import java.util.Optional;

/**
* MailHog email server resource integration with Quarkus DevServices to
* intercept email messages during Native/Integration tests execution.
*/
public class EmailServerResource implements QuarkusTestResourceLifecycleManager, DevServicesContext.ContextAware {
    private Optional<String> containerNetworkId;
    private GenericContainer<?> container;
    private String mailServerUrl;

    @Override
    public void setIntegrationTestContext(DevServicesContext context) {
        containerNetworkId = context.containerNetworkId();
    }

    @Override
    public Map<String, String> start() {
        container = new GenericContainer<>("mailhog/mailhog").withExposedPorts(1025, 8025).withLogConsumer(outputFrame -> {
        }).waitingFor(Wait.forHttp("/").forPort(8025));

        containerNetworkId.ifPresent(container::withNetworkMode);
        container.start();

        mailServerUrl = String.format("http://%s:%d/", getDevServicesAwareHost(), container.getMappedPort(8025));
        return ImmutableMap.of("quarkus.mailer.port", container.getMappedPort(1025).toString(), "quarkus.mailer.host", getDevServicesAwareHost(), "quarkus.mailer.mock", "false");
    }

    private String getDevServicesAwareHost() {
        return containerNetworkId.isPresent() ? container.getCurrentContainerInfo().getConfig().getHostName() : container.getHost();
    }

    @Override
    public void stop() {
        if (container != null) {
            container.stop();
            container = null;
        }
    }

    @Override
    public void inject(TestInjector testInjector) {
        testInjector.injectIntoFields(mailServerUrl, new TestInjector.AnnotatedAndMatchesType(InjectMailServer.class, String.class));
    }
}
